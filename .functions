#!/bin/bash

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
        function diff() {
                git diff --no-index --color-words "$@"
        }
fi

# Create a data URL from a file
function dataurl() {
        local mimeType=$(file -b --mime-type "$1")
        if [[ $mimeType == text/* ]]; then
                mimeType="${mimeType};charset=utf-8"
        fi
        echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Run `dig` and display the most useful info
function digga() {
        dig +nocmd "$1" any +multiline +noall +answer
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
        if [ -z "${1}" ]; then
                echo "ERROR: No domain specified."
                return 1
        fi

        local domain="${1}"
        echo "Testing ${domain}…"
        echo "" # newline

        local tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
                openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

        if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
                local certText=$(echo "${tmp}" |
                        openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version")
                echo "Common Name:"
                echo "" # newline
                echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
                echo "" # newline
                echo "Subject Alternative Name(s):"
                echo "" # newline
                echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
                        sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
                return 0
        else
                echo "ERROR: Certificate not found."
                return 1
        fi
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
        if [ $(command -v xattr) ] && [ $OSTYPE == "darwin" ]; then
                for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
                        xattr -r -d "$attribute" "$@"
                done
        fi
}

# page web text
function readweb() {
        links -dump "$1" | less
}

function worldclock() {
        ADDIS_ABABA=$(TZ=Africa/Addis_Ababa date +"%c (%z %Z)")
        BERLIN=$(TZ=Europe/Berlin date +"%c (%z %Z)")
        CHICAGO=$(TZ=America/Chicago date +"%c (%z %Z)")
        HONK_KONG=$(TZ=Asia/Hong_Kong date +"%c (%z %Z)")
        LONDON=$(TZ=Europe/London date +"%c (%z %Z)")
        LOS_ANGELES=$(TZ=America/Los_Angeles date +"%c (%z %Z)")
        SAN_FRANCISCO=$(TZ=America/Los_Angeles date +"%c (%z %Z)")
        MOSCOW=$(TZ=Europe/Moscow date +"%c (%z %Z)")
        NEW_YORK=$(TZ=America/New_York date +"%c (%z %Z)")
        SOFIA=$(TZ=Europe/Sofia date +"%c (%z %Z)")
        SYDNEY=$(TZ=Australia/Sydney date +"%c (%z %Z)")
        TOKYO=$(TZ=Asia/Tokyo date +"%c (%z %Z)")
        echo "Berlin             $BERLIN"
        echo "New York           $NEW_YORK"
        echo "San Francisco      $SAN_FRANCISCO"
}

function ytmp3() {
        hash yt-dlp 2>/dev/null || {
                echo >&2 "yt-dlp required"
                exit 1
        }
        yt-dlp -x --audio-format mp3 "$1"
}

# jarexe turns a jar file into an single executable
function jarexe() {
        if [ -z "$1" ]; then
                echo "usage: jarexe JARFILE"
        else
                filename=$(mktemp)
                echo '#!/bin/sh' >>"$filename"
                echo 'exec java -server -Xmx1024m -Xms1024m -jar $0 "$@"' >>"$filename"
                cat "$1" >>"$filename"
                chmod +x "$filename"
                echo "The $1 has successfully been turned into an executable: $filename"
        fi
}

function is_interactive_shell() {
        # https://www.gnu.org/software/bash/manual/html_node/Is-this-Shell-Interactive_003f.html
        [[ "$-" =~ "i" ]]
}

function nbless() {
    jupyter nbconvert --stdout --to markdown "$1" | glow -p
}

function screenie() {
    # needs wmctrl, fzf, awk and gnome-screenshot
    wmctrl -i -a $(wmctrl -lp | fzf -m | awk '{print $1}') && gnome-screenshot -w -f screenshot-$(date +\"%Y-%m-%d-%H%M%S\").png
}

